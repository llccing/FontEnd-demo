(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{236:function(t,a,r){"use strict";r.r(a);var e=r(0),s=Object(e.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"译-在-angular-中使用拦截器的方式-top-10"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#译-在-angular-中使用拦截器的方式-top-10","aria-hidden":"true"}},[t._v("#")]),t._v(" [译]在 Angular 中使用拦截器的方式 Top 10")]),t._v(" "),r("p",[t._v("有许多种方式使用拦截器，我确定我们大多数人使用的很浅显。在这篇文章中，我将介绍在 Angular 中我最喜欢的 10 种使用拦截器的方式。")]),t._v(" "),r("p",[t._v("我使例子尽可能的简洁。我希望他们能够启发你们去思考使用拦截器的新方式。这篇文章不是关于拦截器教学的，因为已经有很多好的文章了。但是，在开始倒数之前，让我们以一些基础的知识点开始。")]),t._v(" "),r("h2",{attrs:{id:"httpinterceptor-101"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#httpinterceptor-101","aria-hidden":"true"}},[t._v("#")]),t._v(" HttpInterceptor 101")]),t._v(" "),r("p",[r("a",{attrs:{href:"https://angular.io/api/common/http/HttpInterceptor",target:"_blank",rel:"noopener noreferrer"}},[t._v("HttpInterceptor"),r("OutboundLink")],1),t._v(" 是在 Angular 4.3 引入。它提供一种方式拦截 HTTP 请求和响应，在传递他们之前转换或者处理他们。")]),t._v(" "),r("blockquote",[r("p",[t._v("尽管拦截器能够改变请求和响应，但是 "),r("a",{attrs:{href:"https://angular.io/api/common/http/HttpRequest",target:"_blank",rel:"noopener noreferrer"}},[t._v("HttpRequest"),r("OutboundLink")],1),t._v(" 和 "),r("a",{attrs:{href:"https://angular.io/api/common/http/HttpResponse",target:"_blank",rel:"noopener noreferrer"}},[t._v("HttpResponse"),r("OutboundLink")],1),t._v(" 实例属性是 "),r("code",[t._v("只读")]),t._v(" 的，从而使它们在很大程度上不可变。 — Angular Docs")])]),t._v(" "),r("p",[t._v("这是因为我们可能想要在某个请求第一次没成功后重试。不变性确保了拦截器链能够多次重新处理相同的请求。")]),t._v(" "),r("p",[t._v("你可以使用多个拦截器，但是这个记心中：")]),t._v(" "),r("blockquote",[r("p",[t._v("Angular 通过你定义他们的顺序应用拦截器。如果你定义的拦截器的顺序是 A->B->C，请求将按 A->B->C 的顺序流入，响应将按 C->B->A 的顺序流入。")])]),t._v(" "),r("blockquote",[r("p",[t._v("之后，不能改变顺序或者移除拦截器。如果你需要动态启用、禁用拦截器，你不得不在拦截器本身增加这个功能。— Angular Docs")])]),t._v(" "),r("p",[t._v("在示例 APP 中，我们提供了全部拦截器，但是一次仅使用一个。这通过检查路径实现（"),r("a",{attrs:{href:"https://github.com/melcor76/interceptors/blob/172be0444d505c6164ff506ab311a4966ce8c78f/src/app/interceptors/auth.interceptor.ts#L30",target:"_blank",rel:"noopener noreferrer"}},[t._v("代码在这里"),r("OutboundLink")],1),t._v("）。如果不是我们找的请求，我们通过 "),r("code",[t._v("next.handle(req)")]),t._v(" 传递给下一个拦截器。")]),t._v(" "),r("p",[r("img",{attrs:{src:"xxx",alt:"01"}})]),t._v(" "),r("p",[t._v("拦截器的另一个好处是他们能够"),r("code",[t._v("一起处理请求和响应")]),t._v("。我们将看到，这给我们很好的可能性。")]),t._v(" "),r("p",[t._v("更多深度知识，可以看 "),r("a",{attrs:{href:"https://medium.com/u/bd29063a4857?source=post_page-----db450f8a62d6--------------------------------",target:"_blank",rel:"noopener noreferrer"}},[t._v("Max Koretskyi aka Wizard"),r("OutboundLink")],1),t._v("  这篇很棒的文章:")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://medium.com/angular-in-depth/insiders-guide-into-interceptors-and-httpclient-mechanics-in-angular-103fbdb397bf",target:"_blank",rel:"noopener noreferrer"}},[t._v("Angular 拦截器内部指南和 HttpClient 机制"),r("OutboundLink")],1)])]),t._v(" "),r("p",[t._v("在示例的 HTTP 请求中，我使用了 "),r("a",{attrs:{href:"https://jsonplaceholder.typicode.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("JSONPlaceholder"),r("OutboundLink")],1),t._v(" 这个网站。如果你想看代码，你可以从这里找到：")]),t._v(" "),r("ul",[r("li",[r("p",[t._v("10.x 版本，译者版本\n"),r("a",{attrs:{href:"https://github.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub 示例代码 10.x版本"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://stackblitz.com/github/",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackBlitz 线上运行"),r("OutboundLink")],1)])]),t._v(" "),r("li",[r("p",[t._v("8.x 版本，作者版本\n"),r("a",{attrs:{href:"https://github.com/melcor76/interceptors",target:"_blank",rel:"noopener noreferrer"}},[t._v("GitHub 示例代码 8.x版本"),r("OutboundLink")],1),t._v(" "),r("a",{attrs:{href:"https://stackblitz.com/github/melcor76/interceptors",target:"_blank",rel:"noopener noreferrer"}},[t._v("StackBlitz 线上运行"),r("OutboundLink")],1)])])]),t._v(" "),r("p",[t._v("现在，让我们开始倒数吧！")]),t._v(" "),r("p",[r("img",{attrs:{src:"xxx",alt:"02"}})]),t._v(" "),r("h2",{attrs:{id:"_10-url"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_10-url","aria-hidden":"true"}},[t._v("#")]),t._v(" 10.URL")]),t._v(" "),r("p",[t._v("操纵 URL。当我大声说出来时，听起来有些风险，但是让我们看下在拦截器下做这个事情是多么简单。")]),t._v(" "),r("p",[t._v("例如，我们想从 HTTP 变为 HTTPS。")]),t._v(" "),r("p",[t._v("就像克隆请求同时使用 https:// 替换 http:// 一样简单。然后我们将克隆的 HTTPS 请求发送到下一个 handler。")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 克隆请求，同时使用 https:// 替换 http://")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" httpsReq "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" req"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    url"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" req"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("'https://'")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" next"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("handler")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("httpsReq"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),r("p",[t._v("这个例子中，我们设置 URL 为 HTTP，但是当我们检查请求时，我们能看见它已经变成了 HTTPS。")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" url "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token template-string"}},[r("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v("http://jsonplaceholder.typicode.com/todos/1")]),r("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[t._v("`")])]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("response "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("http"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("url"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[r("img",{attrs:{src:"xxx",alt:"03"}})]),t._v(" "),r("p",[t._v("自动化魔术 https，为什么这个不高明呢。通常你可以通过 web 服务器设置这些事情。或者你想在开发环境从 HTTP 切换到 HTTPS，你可以使用这个 "),r("a",{attrs:{href:"https://angular.io/cli/serve",target:"_blank",rel:"noopener noreferrer"}},[t._v("CLI"),r("OutboundLink")],1),t._v(":")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("ng serve "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("ssl\n")])])]),r("p",[t._v("类似，你可以修改一点 URL，并且成它为 API 前缀拦截器：")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("req"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("clone")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    url"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" environment"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("serverUrl "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" request"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("url\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),r("p",[t._v("或者你可以再次通过 CLI 来实现：")]),t._v(" "),r("div",{staticClass:"language-js extra-class"},[r("pre",{pre:!0,attrs:{class:"language-js"}},[r("code",[t._v("ng serve "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" serve"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("path"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" base"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("href "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("path"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\n")])])]),r("p",[t._v("感谢 "),r("a",{attrs:{href:"https://medium.com/u/d91c7d086b4b?source=post_page-----db450f8a62d6--------------------------------",target:"_blank",rel:"noopener noreferrer"}},[t._v("David Herges"),r("OutboundLink")],1),t._v(" 的 CLI 提示。")]),t._v(" "),r("h2",{attrs:{id:"_9-loader"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_9-loader","aria-hidden":"true"}},[t._v("#")]),t._v(" 9.Loader")])])}),[],!1,null,null,null);a.default=s.exports}}]);